---

- name: "mount: Debug"
  vars:
    msg: |
      bsd_cimage_mount_dir [{{ bsd_cimage_mount_dir }}]
      bsd_cimage_mount_file [{{ bsd_cimage_mount_file }}]
      bsd_cimage_mount_mode [{{ bsd_cimage_mount_mode }}]
      bsd_cimage_mount_points_create [{{ bsd_cimage_mount_points_create }}]
      bsd_cimage_mount_points
      {{ bsd_cimage_mount_points|to_yaml }}
  debug:
    msg: "{{ msg.split('\n')[:-1] }}"
  when: bsd_cimage_debug|bool

- name: "mount: Create mount points"
  file:
    state: directory
    path: "{{ item.mountpoint }}"
    mode: "{{ bsd_cimage_mount_mode }}"
  loop: "{{ bsd_cimage_mount_points }}"
  when: bsd_cimage_mount_points_create|bool
  tags: bsd_cimage_mount_points

- name: "mount: List memory disks"
  command: mdconfig -lv
  register: result
  changed_when: false
  tags: bsd_cimage_mdconfig

- name: "mount: Debug memory disks"
  debug:
    msg: "{{ result.stdout_lines }}"
  when: bsd_cimage_debug|bool
  tags: bsd_cimage_mdconfig

- name: "mount: Create empty memory disks dictionary and my_file"
  set_fact:
    bsd_cimage_mdconfig_devs: {}
    my_file: "{{ bsd_cimage_mount_dir }}/{{ bsd_cimage_mount_file }}"
  tags: bsd_cimage_mdconfig

- name: "mount: Parse memory disks"
  set_fact:
    bsd_cimage_mdconfig_devs: "{{ bsd_cimage_mdconfig_devs|
                                  combine({array.3: {'node': array.1,
                                                     'size': array.2,
                                                     'unit': unit}}) }}"
  loop: "{{ result.stdout_lines }}"
  vars:
    array: "{{ item.split('\t')|map('trim')|list }}"
    unit: "{{ array[0][2:] }}"
  tags: bsd_cimage_mdconfig

- name: "mount: Debug memory disks"
  debug:
    var: bsd_cimage_mdconfig_devs
  when: bsd_cimage_debug|bool
  tags: bsd_cimage_mdconfig

- block:
    - name: "mount: Create memory disk"
      command: "mdconfig -a -t vnode -f {{ my_file }}"
      register: result
    - name: "mount: Add memory disk to dictionary"
      set_fact:
        bsd_cimage_mdconfig_devs: "{{ bsd_cimage_mdconfig_devs|
                                      combine({my_file: {'node': 'vnode',
                                                         'unit': result.stdout[2:]}}) }}"
  rescue:
    - name: "mount: Rescue failed memory disk"
      fail:
        msg: "[ERROR] Can't create memory disk {{ my_file }}\n{{ result }}"
  when: my_file not in bsd_cimage_mdconfig_devs.keys()|list
  tags: bsd_cimage_mdconfig

- name: "mount: Set variable bsd_cimage_mount_dev"
  set_fact:
    bsd_cimage_mount_dev: "md{{ bsd_cimage_mdconfig_devs[my_file]['unit'] }}"
  tags: bsd_cimage_mdconfig

- name: "mount: Debug [{{ my_file }}]"
  debug:
    msg: "Mounted at [{{ bsd_cimage_mount_dev }}]"
  when: bsd_cimage_debug|bool
  tags: bsd_cimage_mdconfig

- name: "mount: Mount {{ bsd_cimage_mount_dev }} partitions"
  mount:
    src: "/dev/{{ bsd_cimage_mount_dev }}{{ item.partition }}"
    path: "{{ item.mountpoint }}"
    fstype: "{{ item.fstype }}"
    state: mounted
    fstab: /tmp/tmp.fstab  # Note 1.
  loop: "{{ bsd_cimage_mount_points }}"
  register: result

- name: "mount: Debug mount results"
  debug:
    var: result
  when: bsd_cimage_debug|bool

# Notes
#
# Note 1: It's not possible to mount a device without touching fstab. Temporary fstab is a
# workaround.
# See https://github.com/ansible-collections/ansible.posix/issues/84#issuecomment-742420345

# EOF
...
